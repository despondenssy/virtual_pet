services:
  app:
    image: despondenssy/3-med:latest  # Имя образа из Docker Hub
    environment:
      - POSTGRES_DB=default
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
    ports:
      - "8080:8080"  # Прокидываем порт приложения на локальную машину
    restart: always  # Автоматически перезапускать приложение при сбое
    depends_on:
      - postgres  # Убедимся, что приложение стартует после базы данных
      - keydb     # Также подождем KeyDB
    volumes:
      - .:/app  # Подключаем текущую папку как volume

  postgres:
    image: postgres:15  # Официальный образ PostgreSQL
    environment:
      POSTGRES_DB: default  # Имя базы данных
      POSTGRES_USER: postgres  # Имя пользователя
      POSTGRES_PASSWORD: postgres  # Пароль пользователя
      PGDATA: /var/lib/postgresql/data/pgdata  # Указываем место хранения данных
    ports:
      - "8001:5432"  # Прокидываем порт базы данных на локальную машину
    volumes:
      - postgres_data:/var/lib/postgresql/data  # Монтируем том для данных БД
    restart: always  # Автоматически перезапускать базу при сбое

  keydb:
    image: eqalpha/keydb:x86_64_v5.3.3  # Официальный образ KeyDB
    container_name: keydb
    command: "keydb-server /etc/keydb/redis.conf --server-threads 2"
    volumes:
      - keydb_data:/data  # Монтируем том для данных KeyDB
    ports:
      - "6379:6379"  # Прокидываем порт KeyDB на локальную машину
    restart: always  # Автоматически перезапускать KeyDB при сбое

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"        # порт для взаимодействия с приложениями
      - "15672:15672"      # порт для UI панели
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    restart: always

volumes:
  postgres_data:
    driver: local  # Создаем локальный том для хранения данных PostgreSQL
  keydb_data:
    driver: local  # Создаем локальный том для хранения данных KeyDB